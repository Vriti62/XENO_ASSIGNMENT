// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//store
model Store{
  id             String   @id @default(uuid())
  store_name     String   @unique
  user_email     String?
  orders         Order[]
  products       Product[]
  created_at DateTime @default(now())
}

//user
model Customer{
  id String @id
  cust_name String
  cust_email String @unique
  order Order[]
  created_at DateTime @default(now())
}

//product
model Product{
  id String @id //shopify_
  prod_name String
  prod_price Float @default(0)
  prod_type String
  prod_tags String
  store Store @relation(fields:[store_id], references: [id], onDelete: Cascade)
  store_id String
  orderItem OrderItem[]
  created_at DateTime @default(now())
}
//order
model Order{
  id String @id
  customer Customer @relation(fields:[cust_id], references: [id], onDelete:Cascade)
  cust_id String
  order_number Int
  order_name String
  order_price String
  store Store @relation(fields:[store_id], references: [id], onDelete: Cascade)
  store_id String
  orderItem OrderItem[]
  created_at DateTime @default(now())
}

//each item in the order
model OrderItem {
  id String @id @default(uuid())
  order Order @relation(fields:[order_id], references: [id], onDelete:Cascade)
  order_id String 
  product Product @relation(fields:[prod_id], references: [id], onDelete:Cascade)
  prod_id String 
  quantity Int
  created_at DateTime @default(now())
}

//inventory creation 
model InventoryItem {
  id String @id   
  sku String?     
  tracked Boolean 
  weight_value Float?
  weight_unit String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
